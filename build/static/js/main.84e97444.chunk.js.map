{"version":3,"sources":["components/app.js","serviceWorker.js","index.js"],"names":["NOT_SUBMITTED","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","email","publicKey","reason","submissionState","handleChangeEmail","bind","assertThisInitialized","handlePublicKeyChange","handleReasonChange","handleSubmit","e","setState","target","value","_this2","preventDefault","alert","fields","trim","axios","post","then","res","console","log","data","catch","err","attemptSubmission","_this3","theForm","react_default","a","createElement","onSubmit","type","required","placeholder","onChange","theMessage","message","className","formState","renderContent","Component","Boolean","window","location","hostname","match","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84e97444.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport '../styles/app.css';\n\n//submission states\nconst NOT_SUBMITTED = 'not submitted';\nconst SUBMITTING = 'submitting';\nconst SUBMISSION_ERROR = 'submission error';\nconst SUBMISSION_SUCCESS = 'submission success';\n\nexport default class App extends Component {\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\temail: '',\n\t\t\tpublicKey: '',\n\t\t\treason: '',\n\t\t\tsubmissionState: NOT_SUBMITTED\n\t\t};\n\n\t\tthis.handleChangeEmail = this.handleChangeEmail.bind(this);\n\t\tthis.handlePublicKeyChange = this.handlePublicKeyChange.bind(this);\n\t\tthis.handleReasonChange = this.handleReasonChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\thandleChangeEmail(e){\n\t\tthis.setState({email: e.target.value});\n\t}\n\n\thandlePublicKeyChange(e){\n\t\tthis.setState({publicKey: e.target.value});\n\t}\n\n\thandleReasonChange(e){\n\t\tthis.setState({reason: e.target.value});\n\t}\n\n\thandleSubmit(e){\n\t\te.preventDefault();\n\n\t\t//should have better vadation, but ok\n\t\tif(\n\t\t\t!this.state.email ||\n\t\t\t!this.state.publicKey ||\n\t\t\t!this.state.reason\n\t\t){\n\t\t\talert('all inputs are required');\n\t\t\tthis.setState({submissionState: NOT_SUBMITTED});\n\t\t\treturn;\n\t\t}\n\n\t\t//actually do the submission\n\t\tconst attemptSubmission = () => {\n\t\t\tconst fields = {\n\t\t\t\temail: this.state.email.trim(),\n\t\t\t\tpublicKey: this.state.publicKey.trim(),\n\t\t\t\treason: this.state.reason.trim()\n\t\t\t};\n\n\t\t\taxios.post('/api/v1/new_accounts/create', fields)\n\t\t\t.then(res => {\n\t\t\t\tconsole.log(res.data);\n\t\t\t\tthis.setState({submissionState: SUBMISSION_SUCCESS});\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err);\n\t\t\t\tthis.setState({submissionState: SUBMISSION_ERROR});\n\t\t\t});\n\t\t};\t\t\n\n\t\t//use callback here\n\t\tthis.setState(\n\t\t\t{submissionState: SUBMITTING},\n\t\t\tattemptSubmission()\n\t\t);\n\t}\n\n\trender(){\n\t\tconst {submissionState} = this.state;\n\n\t\tconst theForm = () => {\n\t\t\treturn (\n\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t\t<input type='email' required value={this.state.email} placeholder='email (required)' onChange={this.handleChangeEmail} />\n\t\t\t\t\t<input type='text' required value={this.state.publicKey} placeholder='public key (required)' onChange={this.handlePublicKeyChange} />\n\t\t\t\t\t<textarea required value={this.state.reason} placeholder='reason for new account (required)' onChange={this.handleReasonChange} />\n\t\t\t\t\t<button type='submit'>Submit</button>\n \t\t\t\t</form>\n\t\t\t);\n\t\t};\n\n\t\tconst theMessage = (message) => {\n\t\t\treturn (\n\t\t\t\t<div className='message'>\n\t\t\t\t\t<h3>{message}</h3>\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\n\n\t\tconst theSpinner = () => {\n\t\t\treturn (\n\t\t\t\t<div className='in_progress'>\n\t\t\t\t\t<p>submitting form...</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\n\n\t\tconst renderContent = () => {\n\t\t\tlet formState = null;\n\t\t\tswitch(submissionState){\n\t\t\t\tcase NOT_SUBMITTED:\n\t\t\t\t\tformState = theForm();\n\t\t\t\t\tbreak;\n\t\t\t\tcase SUBMITTING:\n\t\t\t\t\tformState = theSpinner();\n\t\t\t\t\tbreak;\n\t\t\t\tcase SUBMISSION_ERROR:\n\t\t\t\t\tformState = theMessage('There has been an error. Please email us at hello@telosfoundation.io');\n\t\t\t\t\tbreak;\n\t\t\t\tcase SUBMISSION_SUCCESS:\n\t\t\t\t\tformState = theMessage('Thanks for your information.');\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tformState = theForm();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn formState;\n\t\t}\n\n\t\treturn (\n\t\t\t<main className='wrapper'>\n\t\t\t\t<div className='new_accounts'>\n\t\t\t\t\t{renderContent()}\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t);\n\t}\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}